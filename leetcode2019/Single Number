Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1
Example 2:

Input: [4,1,2,1,2]
Output: 4

class Solution:
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        d = dict()
        maxs = []
        for c in nums:
            if c not in d:
                d[c] = 1
            else:
                d[c] += 1
        for i,v in d.items():
            maxs.append(v)
        maxu = min(maxs)
        for i, v in d.items():
            if v == maxu:
                return i
                break