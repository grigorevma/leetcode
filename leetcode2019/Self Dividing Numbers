A self-dividing number is a number that is divisible by every digit it contains.

For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.

Also, a self-dividing number is not allowed to contain the digit zero.

Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.

Example 1:
Input: 
left = 1, right = 22
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]


class Solution:
#128 ms	6.4 MB
    def selfDividingNumbers(self, left, right):
        """
        :type left: int
        :type right: int
        :rtype: List[int]
        """
        needlist = []
        while left < right:
            if check(left) == True:
                needlist.append(left)
            else:
                left +=1
                continue
            left +=1
        if check(right) == True:
            needlist.append(right)
        return needlist
    
def check(number):
    x = []
    for i in str(number):
        try:
            if number % int(i) == 0:
                x.append(i)
            else:
                x.append(False)
        except:
            x.append(False)
    if False in x:
        return False
    else:
        return True