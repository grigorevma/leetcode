You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        # number1 = ""
        # number2 = ""
        # while l1:
        #     number1 = number1 + str(l1.val)
        #     l1 = l1.next
        # while l2:
        #     number2 = number2 + str(l2.val)
        #     l2 = l2.next
        outnumber = ListNodeTooNumber(l1) + ListNodeTooNumber(l2)
        # outnumber = int(number1[::-1]) + int(number2[::-1])
        outnumber = str(outnumber)[::-1]
        head = ListNode(outnumber[0])
        outnumber = outnumber [1:]
        outlist = head
        for i in outnumber:
            temp = ListNode(i)
            head.next = temp
            head = head.next
        return  outlist
    
def ListNodeTooNumber(lnode):
    number = ""
    while lnode:
        number = number + str(lnode.val)
        lnode = lnode.next
    neednumber = int(number[::-1])
    return neednumber